@model dynamic

@{
    ViewBag.Title = "TypeScript for React developers course";
}

<style>
    .course {
        padding-left: 12px;
    }
</style>


<div class="course">
    <h2>TypeScript for React developers</h2>


    <p>
        The open-source React library from Facebook is becoming very popular. Not only is it used for the main Facebook website but lots of other major companies are adopting React. This class will introduce delegates to building web applications using React. Many developers think of React as just a View part of the Model View Controller pattern. With the proper understanding of React gained during this course you will understand its true powers.
    </p>
    <p>
        The course doesn’t stop where React itself stops. It enables you to build rich Single Page Applications (SPA) using the popular React-Router library. You will also learn about architecting React applications using the Flux design pattern. We will do this using the popular Redux library.
    </p>

    <h3>Want to know more?</h3>
    <p>
        Would you like more information or a customized course for your company? Please contact Maurice at <a href="mailto:Maurice@TheProblemSolver.nl">Maurice@TheProblemSolver.nl</a>.
    </p>

    <h3>
        Target Audience
    </h3>
    <p>
        This course is intended for expreienced React developers who want to use TypeScript and strong typing when building applications.
    </p>

    <h3>
        Modules and topics
    </h3>
    <p>
        This two day course consists of 6 modules, each focussing on a specific topic. Each module consists of a lecture explaining the subject as well as a hands on lab where each participant uses the technology to build an application.
    </p>

    <ol>
        <li>
            <h4>TypeScript introduction</h4>
            <p>
                In this module we will cover the basics of the TypeScript language. We will take a look at what
                problem TypeScript tries to solve and why. You will learn how to install, configure and use the
                TypeScript compiler to start type checking and compiling your source code. We will cover how
                type inferencing works and how you can add type annotations. We will use classes, inheritance
                and interfaces to create our own custom types. We will explore how the type system works with
                structural typing. Finally, we will take a look at how generics are leveraged to make types more
                reusable.
            </p>
        </li>
        <li>
            <h4>Tooling for TypeScript developers</h4>
            <p>
                In this module we will explore the TypeScript tooling ecosystem. We will take a look at how
                Webpack is used to bundle TypeScript modules into a single bundle the browser can load. We
                take a look at using either Babel and the TS-Loader to configure Webpack. You will learn how to
                configure ESLint and TSLint to perform static analysis on your source code and warn you about
                bad coding practices. You will also learn how to use Prettier to ensure a consistent coding style.
                Finally, we will take a look at some more Visual Studio Code tooling that will make TypeScript
                developers more productive.
            </p>
        </li>
        <li>
            <h4>Advanced TypeScript</h4>
            <p>
                In this module you will learn more advanced TypeScript options. We will start with type aliases,
                union and intersection types. We will explore how to use mapped types to create a type based
                on another existing type or object. Next you will learn how to use tagged unions to enhance
                type checking and code correctness. We will also explore runtime type checking using custom
                type guards. You will also learn how to simplify asynchronous code using the async/await syntax
                and explore how this behaves at runtime. Finally, we will take a look at what the various strict
                options TypeScript have to offer and why you should use them.            </p>
        </li>
        <li>
            <h4>Developing React applications using TypeScript</h4>
            <p>
                Developing React applications with TypeScript is a good way to add type safety to React
                components. In this module you will learn how to start writing React components in TypeScript.
                We will look at how to create both functional components with hooks as well as class-based
                components using TypeScript. You will also learn to use union types to make prop definitions
                more flexible.
            </p>
        </li>
        <li>
            <h4>Popular 3rd party React Libraries and TypeScript</h4>
            <p>
                While React is a very capable UI component library every application needs more. In this module
                we will take a look at some of the more popular libraries for React developers and how you
                might use them using TypeScript. We will explore libraries written in TypeScript containing type
                information. We will also look at libraries that don’t provide type information out of the box.            </p>
        </li>
        <li>
            <h4>Unit testing React components with TypeScript and Jest</h4>
            <p>
                In this module we will explore how to create unit tests for React components. You will do this
                using TypeScript, Jest and React-Testing-Library. We will explore some best practices on how to
                write tests in TypeScript and make sure there are no type errors.            </p>
        </li>
    </ol>



    <h3>Prerequisite experience</h3>
    <ol>
        <li>At least 6 months experience developing web applications with React and JavaScript</li>
        <li>Knowledge of using NPM packages</li>
        <li>Knowledge of WebPack with Babel</li>
    </ol>
</div>



@section contentRight {
}
