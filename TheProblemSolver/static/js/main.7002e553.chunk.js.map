{"version":3,"sources":["components/ArticleCard.tsx","components/ArticleListPresentation.tsx","components/Loading.tsx","components/ArticleListContainer.tsx","App.tsx","serviceWorker.js","index.tsx","components/Loading.module.css"],"names":["ArticleCard","_ref","article","month","prevMonth","react_default","a","createElement","Fragment","className","href","link","target","title","author","indexOf","concat","ArticleListPresentation","articles","map","index","date","getMonth","getFullYear","getMonthString","Date","card","components_ArticleCard","key","Loading","classes","loading","ReactAI","withTracking","_useAbortableFetch","useAbortableFetch","data","error","message","components_Loading","components_ArticleListPresentation","App","style","fontWeight","components_ArticleListContainer","Boolean","window","location","hostname","match","init","instrumentationKey","setAppContext","urlReferrer","document","referrer","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","spinner"],"mappings":"4NAkDeA,EAtCK,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAASC,EAAZF,EAAYE,MAAOC,EAAnBH,EAAmBG,UAAnB,OAClBC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACGJ,IAAcD,EACbE,EAAAC,EAAAC,cAAA,QAAME,UAAU,mBAEhBJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBACdJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,uBAAuBN,IAG3CE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uCACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,iBAEfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,KAAGG,KAAMR,EAAQS,KAAMC,OAAO,YAC5BP,EAAAC,EAAAC,cAAA,UAAKL,EAAQW,SAGjBR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,cACsB,IAAhCP,EAAQY,OAAOC,QAAQ,KACtBV,EAAAC,EAAAC,cAAA,KACEG,KAAI,uBAAAM,OAAyBd,EAAQY,QACrCF,OAAO,YAENV,EAAQY,QAGXT,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAAGN,EAAQY,cCCVG,SA5BiB,SAAAhB,GAEI,IADlCiB,EACkCjB,EADlCiB,SAEId,EAAY,GAEhB,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACZS,EAASC,IAAI,SAACjB,EAASkB,GACtB,IACMjB,EAhBS,SAACkB,GAAD,SAAAL,OAClBK,EAAKC,WAAa,EADA,KAAAN,OACKK,EAAKE,eAeXC,CADD,IAAIC,KAAKvB,EAAQmB,OAGxBK,EACJrB,EAAAC,EAAAC,cAACoB,EAAD,CACEC,IAAKR,EACLlB,QAASA,EACTC,MAAOA,EACPC,UAAWA,IAMf,OAFAA,EAAYD,EAELuB,uBC7BAG,EAJC,WACd,OAAOxB,EAAAC,EAAAC,cAAA,OAAKE,UAAWqB,IAAQC,WCelBC,MAAQC,aAXM,WAAM,IAAAC,EACAC,IAC/B,wCADMC,EADyBF,EACzBE,KAAML,EADmBG,EACnBH,QAASM,EADUH,EACVG,MAIvB,OAAIA,EAAchC,EAAAC,EAAAC,cAAA,qBAAa8B,EAAMC,SACjCP,IAAYK,EAAa/B,EAAAC,EAAAC,cAACgC,EAAD,MAEtBlC,EAAAC,EAAAC,cAACiC,EAAD,CAAyBtB,SAAUkB,KAK1C,wBCRaK,EATH,kBACVpC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QAAQiC,MAAO,CAAEC,WAAY,MAA3C,sBAGAtC,EAAAC,EAAAC,cAACqC,EAAD,QCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNjB,IAAQkB,KAAK,CAAEC,mBAAoB,yCACnCnB,IAAQoB,cAAc,CAACC,YAAaC,SAASC,WAE7CC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASJ,SAASK,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCElInBC,EAAAC,QAAA,CAAkBpC,QAAA,yBAAAqC,QAAA","file":"static/js/main.7002e553.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Article from './article';\r\n\r\n// Timeline from https://github.com/sanex3339/bootstrap-responsive-timeline\r\n\r\ntype ArticleCardProps = {\r\n  article: Article;\r\n  month: string;\r\n  prevMonth: string;\r\n};\r\n\r\nconst ArticleCard = ({ article, month, prevMonth }: ArticleCardProps) => (\r\n  <>\r\n    {prevMonth === month ? (\r\n      <span className=\"timeline-label\" />\r\n    ) : (\r\n      <span className=\"timeline-label\">\r\n        <span className=\"label label-primary\">{month}</span>\r\n      </span>\r\n    )}\r\n    <div className=\"timeline-item\">\r\n      <div className=\"timeline-point timeline-point-blank\">\r\n        <i className=\"fa fa-money\" />\r\n      </div>\r\n      <div className=\"timeline-event\">\r\n        <div className=\"timeline-heading\">\r\n          <a href={article.link} target=\"_article\">\r\n            <h4>{article.title}</h4>\r\n          </a>\r\n        </div>\r\n        <div className=\"timeline-footer\">\r\n          <p className=\"text-right\">\r\n            {article.author.indexOf('@') === 0 ? (\r\n              <a\r\n                href={`https://twitter.com/${article.author}`}\r\n                target=\"_twitter\"\r\n              >\r\n                {article.author}\r\n              </a>\r\n            ) : (\r\n              <>{article.author}</>\r\n            )}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </>\r\n);\r\n\r\nexport default ArticleCard;\r\n","import React from 'react';\r\n\r\nimport ArticleCard from './ArticleCard';\r\nimport Article from './article';\r\n\r\nimport './timeline.css';\r\n\r\nconst getMonthString = (date: Date) =>\r\n  `${date.getMonth() + 1}-${date.getFullYear()}`;\r\n\r\ntype ArticleListPresentationProps = {\r\n  articles: Article[];\r\n};\r\n\r\nconst ArticleListPresentation = ({\r\n  articles\r\n}: ArticleListPresentationProps) => {\r\n  let prevMonth = '';\r\n\r\n  return (\r\n    <div className=\"timeline\">\r\n      {articles.map((article, index) => {\r\n        const date = new Date(article.date);\r\n        const month = getMonthString(date);\r\n\r\n        const card = (\r\n          <ArticleCard\r\n            key={index}\r\n            article={article}\r\n            month={month}\r\n            prevMonth={prevMonth}\r\n          />\r\n        );\r\n\r\n        prevMonth = month;\r\n\r\n        return card;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArticleListPresentation;\r\n","import React from 'react';\r\nimport classes from './Loading.module.css';\r\n\r\nconst Loading = () => {\r\n  return <div className={classes.loading} />;\r\n};\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport useAbortableFetch from 'use-abortable-fetch';\r\nimport ReactAI from 'react-appinsights';\r\n\r\nimport ArticleListPresentation from './ArticleListPresentation';\r\nimport Article from './article';\r\nimport Loading from './Loading';\r\n\r\nconst ArticleListContainer = () => {\r\n  const { data, loading, error } = useAbortableFetch<Article[]>(\r\n    'http://theproblemsolver.nl/api/react'\r\n  );\r\n\r\n  if (error) return <div>Error: {error.message}</div>;\r\n  if (loading || !data) return <Loading />;\r\n\r\n  return <ArticleListPresentation articles={data as Article[]} />;\r\n};\r\n\r\nexport default ReactAI.withTracking(\r\n  ArticleListContainer,\r\n  'ArticleListContainer'\r\n);\r\n","import React from 'react';\n\nimport ArticleListContainer from './components/ArticleListContainer';\n\nconst App = () => (\n  <div className=\"container\">\n    <h3 className=\"title\" style={{ fontWeight: 700 }}>\n      React reading list\n    </h3>\n    <ArticleListContainer />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport ReactAI from 'react-appinsights';\nReactAI.init({ instrumentationKey: '3ce103f9-2356-4dae-b601-962c513443d8' });\nReactAI.setAppContext({urlReferrer: document.referrer});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loading_loading__3inxq\",\"spinner\":\"Loading_spinner__2tnRw\"};"],"sourceRoot":""}